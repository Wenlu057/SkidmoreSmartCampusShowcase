from __future__ import annotations
from typing import Generic, Iterator, Optional, Tuple, TypeVar

T = TypeVar("T")
K = TypeVar("K")
V = TypeVar("V")

class Stack(Generic[T]):
    def push(self, x: T) -> None: ...
    def pop(self) -> T: ...
    def peek(self) -> T: ...
    def is_empty(self) -> bool: ...

class Queue(Generic[T]):
    def enqueue(self, x: T) -> None: ...
    def dequeue(self) -> T: ...
    def is_empty(self) -> bool: ...

class MinHeap(Generic[T]):
    def push(self, x: T) -> None: ...
    def pop(self) -> T: ...
    def peek(self) -> T: ...
    def __len__(self) -> int: ...

class HashMap(Generic[K, V]):
    def put(self, key: K, value: V) -> None: ...
    def get(self, key: K) -> Optional[V]: ...
    def remove(self, key: K) -> Optional[V]: ...
    def __contains__(self, key: K) -> bool: ...

class BST(Generic[K, V]):
    def insert(self, key: K, value: V) -> None: ...
    def find(self, key: K) -> Optional[V]: ...
    def inorder(self) -> Iterator[Tuple[K, V]]: ...
